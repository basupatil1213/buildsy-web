-- ============================================================================
-- BUILDSY DATABASE COMPLETE SETUP SCRIPT
-- Execute this entire file in your Supabase SQL Editor
-- ============================================================================

-- Drop existing objects if they exist (for clean setup)
DROP VIEW IF EXISTS project_details CASCADE;
DROP TRIGGER IF EXISTS update_projects_updated_at ON projects CASCADE;
DROP TRIGGER IF EXISTS update_votes_updated_at ON votes CASCADE;
DROP TRIGGER IF EXISTS update_comments_updated_at ON comments CASCADE;
DROP TRIGGER IF EXISTS update_chat_sessions_updated_at ON chat_sessions CASCADE;
DROP FUNCTION IF EXISTS update_updated_at_column CASCADE;
DROP TABLE IF EXISTS chat_sessions CASCADE;
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS votes CASCADE;
DROP TABLE IF EXISTS projects CASCADE;

-- ============================================================================
-- 1. CREATE CORE TABLES
-- ============================================================================

-- Projects table for storing project ideas generated by AI chat
CREATE TABLE projects (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    tech_stack TEXT[] DEFAULT '{}',
    category VARCHAR(50) NOT NULL,
    difficulty VARCHAR(20) NOT NULL CHECK (difficulty IN ('beginner', 'intermediate', 'advanced')),
    estimated_duration VARCHAR(50) NOT NULL,
    features TEXT[] DEFAULT '{}',
    requirements TEXT[] DEFAULT '{}',
    status VARCHAR(20) DEFAULT 'idea' CHECK (status IN ('idea', 'planning', 'in_progress', 'completed', 'on_hold')),
    is_public BOOLEAN DEFAULT false,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Votes table for project voting system
CREATE TABLE votes (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    vote_type INTEGER NOT NULL CHECK (vote_type IN (-1, 1)), -- -1 for downvote, 1 for upvote
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(project_id, user_id) -- Ensure one vote per user per project
);

-- Comments table for project comments with nested reply support
CREATE TABLE comments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    content TEXT NOT NULL,
    parent_id UUID REFERENCES comments(id) ON DELETE CASCADE, -- For nested comments/replies
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Chat sessions table to store AI chat history (optional)
CREATE TABLE chat_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL UNIQUE,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    messages JSONB DEFAULT '[]',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- ============================================================================
-- 2. CREATE PERFORMANCE INDEXES
-- ============================================================================

-- Projects table indexes
CREATE INDEX idx_projects_user_id ON projects(user_id);
CREATE INDEX idx_projects_category ON projects(category);
CREATE INDEX idx_projects_difficulty ON projects(difficulty);
CREATE INDEX idx_projects_status ON projects(status);
CREATE INDEX idx_projects_is_public ON projects(is_public);
CREATE INDEX idx_projects_created_at ON projects(created_at DESC);

-- Votes table indexes
CREATE INDEX idx_votes_project_id ON votes(project_id);
CREATE INDEX idx_votes_user_id ON votes(user_id);
CREATE INDEX idx_votes_project_user ON votes(project_id, user_id);

-- Comments table indexes
CREATE INDEX idx_comments_project_id ON comments(project_id);
CREATE INDEX idx_comments_user_id ON comments(user_id);
CREATE INDEX idx_comments_parent_id ON comments(parent_id);
CREATE INDEX idx_comments_created_at ON comments(created_at DESC);

-- Chat sessions table indexes
CREATE INDEX idx_chat_sessions_user_id ON chat_sessions(user_id);
CREATE INDEX idx_chat_sessions_session_id ON chat_sessions(session_id);

-- ============================================================================
-- 3. ENABLE ROW LEVEL SECURITY (RLS)
-- ============================================================================

ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE votes ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE chat_sessions ENABLE ROW LEVEL SECURITY;

-- ============================================================================
-- 4. CREATE RLS POLICIES FOR PROJECTS TABLE
-- ============================================================================

-- Users can view their own projects
CREATE POLICY "Users can view their own projects" ON projects
    FOR SELECT USING (auth.uid() = user_id);

-- Users can view public projects
CREATE POLICY "Users can view public projects" ON projects
    FOR SELECT USING (is_public = true);

-- Users can insert their own projects
CREATE POLICY "Users can insert their own projects" ON projects
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own projects
CREATE POLICY "Users can update their own projects" ON projects
    FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own projects
CREATE POLICY "Users can delete their own projects" ON projects
    FOR DELETE USING (auth.uid() = user_id);

-- ============================================================================
-- 5. CREATE RLS POLICIES FOR VOTES TABLE
-- ============================================================================

-- Users can view votes on accessible projects
CREATE POLICY "Users can view votes on accessible projects" ON votes 
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM projects 
            WHERE projects.id = votes.project_id 
            AND (projects.is_public = true OR projects.user_id = auth.uid())
        )
    );

-- Authenticated users can vote on public projects
CREATE POLICY "Authenticated users can vote on public projects" ON votes
    FOR INSERT WITH CHECK (
        auth.role() = 'authenticated' AND
        EXISTS (
            SELECT 1 FROM projects 
            WHERE projects.id = votes.project_id 
            AND projects.is_public = true
        )
    );

-- Users can update their own votes
CREATE POLICY "Users can update their own votes" ON votes
    FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own votes
CREATE POLICY "Users can delete their own votes" ON votes
    FOR DELETE USING (auth.uid() = user_id);

-- ============================================================================
-- 6. CREATE RLS POLICIES FOR COMMENTS TABLE
-- ============================================================================

-- Users can view comments on accessible projects
CREATE POLICY "Users can view comments on accessible projects" ON comments
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM projects 
            WHERE projects.id = comments.project_id 
            AND (projects.is_public = true OR projects.user_id = auth.uid())
        )
    );

-- Authenticated users can comment on public projects
CREATE POLICY "Authenticated users can comment on public projects" ON comments
    FOR INSERT WITH CHECK (
        auth.role() = 'authenticated' AND
        EXISTS (
            SELECT 1 FROM projects 
            WHERE projects.id = comments.project_id 
            AND projects.is_public = true
        )
    );

-- Users can update their own comments
CREATE POLICY "Users can update their own comments" ON comments
    FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own comments
CREATE POLICY "Users can delete their own comments" ON comments
    FOR DELETE USING (auth.uid() = user_id);

-- ============================================================================
-- 7. CREATE RLS POLICIES FOR CHAT SESSIONS TABLE
-- ============================================================================

-- Users can view their own chat sessions
CREATE POLICY "Users can view their own chat sessions" ON chat_sessions
    FOR SELECT USING (auth.uid() = user_id);

-- Users can insert their own chat sessions
CREATE POLICY "Users can insert their own chat sessions" ON chat_sessions
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own chat sessions
CREATE POLICY "Users can update their own chat sessions" ON chat_sessions
    FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own chat sessions
CREATE POLICY "Users can delete their own chat sessions" ON chat_sessions
    FOR DELETE USING (auth.uid() = user_id);

-- ============================================================================
-- 8. CREATE AUTO-UPDATE TRIGGERS
-- ============================================================================

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at columns
CREATE TRIGGER update_projects_updated_at 
    BEFORE UPDATE ON projects
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_votes_updated_at 
    BEFORE UPDATE ON votes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_comments_updated_at 
    BEFORE UPDATE ON comments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_chat_sessions_updated_at 
    BEFORE UPDATE ON chat_sessions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- 9. CREATE OPTIMIZED DATABASE VIEW
-- ============================================================================

-- Create view for easier querying with aggregated data
CREATE VIEW project_details AS
SELECT 
    p.*,
    u.email as author_email,
    COALESCE(v.total_votes, 0) as total_votes,
    COALESCE(v.upvotes, 0) as upvotes,
    COALESCE(v.downvotes, 0) as downvotes,
    COALESCE(c.comment_count, 0) as comment_count
FROM projects p
LEFT JOIN auth.users u ON p.user_id = u.id
LEFT JOIN (
    SELECT 
        project_id, 
        SUM(vote_type) as total_votes,
        COUNT(CASE WHEN vote_type = 1 THEN 1 END) as upvotes,
        COUNT(CASE WHEN vote_type = -1 THEN 1 END) as downvotes
    FROM votes
    GROUP BY project_id
) v ON p.id = v.project_id
LEFT JOIN (
    SELECT 
        project_id, 
        COUNT(*) as comment_count
    FROM comments
    GROUP BY project_id
) c ON p.id = c.project_id;

-- ============================================================================
-- 10. INSERT SAMPLE DATA (OPTIONAL - FOR TESTING)
-- ============================================================================

-- Uncomment the following lines if you want sample data for testing
/*
-- Insert sample projects (replace with actual user UUIDs from auth.users)
INSERT INTO projects (name, description, tech_stack, category, difficulty, estimated_duration, features, requirements, is_public, user_id) 
VALUES 
(
    'Todo App with AI',
    'A smart todo application that uses AI to categorize and prioritize tasks automatically.',
    ARRAY['React', 'Node.js', 'OpenAI', 'PostgreSQL'],
    'Productivity',
    'intermediate',
    '2-3 weeks',
    ARRAY['AI task categorization', 'Priority suggestions', 'Due date reminders'],
    ARRAY['Basic React knowledge', 'API integration experience'],
    true,
    -- Replace this with an actual user UUID from your auth.users table
    '00000000-0000-0000-0000-000000000000'
),
(
    'Weather Dashboard',
    'A beautiful weather dashboard with location-based forecasts and historical data.',
    ARRAY['Vue.js', 'Express.js', 'Weather API', 'Chart.js'],
    'Web Development',
    'beginner',
    '1-2 weeks',
    ARRAY['Current weather', '7-day forecast', 'Weather charts', 'Location search'],
    ARRAY['Basic JavaScript', 'API usage'],
    true,
    -- Replace this with an actual user UUID from your auth.users table
    '00000000-0000-0000-0000-000000000000'
);
*/

-- ============================================================================
-- SETUP COMPLETE!
-- ============================================================================

-- This script has created:
-- ✅ 4 core tables (projects, votes, comments, chat_sessions)
-- ✅ Performance indexes for fast queries
-- ✅ Row Level Security policies for data protection
-- ✅ Auto-update triggers for timestamps
-- ✅ Optimized view for complex queries
-- 
-- Your Buildsy database is now ready to use!
-- 
-- Next steps:
-- 1. Test the setup by creating a project through your app
-- 2. Verify RLS policies are working correctly
-- 3. Monitor query performance and add additional indexes if needed
